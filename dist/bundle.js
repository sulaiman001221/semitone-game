/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/jam_buddy.js":
/*!**************************!*\
  !*** ./src/jam_buddy.js ***!
  \**************************/
/***/ ((module) => {

eval("const errorMessage = {\n  invalidNotes:\n    \"Invalid notes provided. Notes should be one of A, A#, Bb, B, C, C#, Db, D, D#, Eb, E, F, F#, Gb, G, G#, Ab.\",\n  notesNotSet:\n    \"Current notes not set, you should set two notes before checking the answer\",\n  invalidDataType: \"All the provided notes should be strings\",\n  invalidArray: \"Notes should be provided as an array\",\n  similarNotes: \"Notes should not be similar\",\n  invalidLength: \"You should provide exactly two notes\",\n};\n\nconst VALID_NOTE_COUNT = 2;\n\nfunction validateNotes(notes, validNotes) {\n  if (!Array.isArray(notes)) {\n    throw new Error(errorMessage.invalidArray);\n  }\n  if (notes.length !== VALID_NOTE_COUNT) {\n    throw new Error(errorMessage.invalidLength);\n  }\n  if (notes[0] === notes[1]) {\n    throw new Error(errorMessage.similarNotes);\n  }\n  for (let i = 0; i < notes.length; i++) {\n    if (typeof notes[i] !== \"string\") {\n      throw new Error(errorMessage.invalidDataType);\n    }\n    if (!validNotes.includes(notes[i])) {\n      throw new Error(errorMessage.invalidNotes);\n    }\n  }\n}\n\nfunction getRandomNote(notes) {\n  return notes[Math.floor(Math.random() * notes.length)];\n}\n\nclass JamBuddy {\n  constructor() {\n    this.notes = [\n      \"A\",\n      \"A#\",\n      \"Bb\",\n      \"B\",\n      \"C\",\n      \"C#\",\n      \"Db\",\n      \"D\",\n      \"D#\",\n      \"Eb\",\n      \"E\",\n      \"F\",\n      \"F#\",\n      \"Gb\",\n      \"G\",\n      \"G#\",\n      \"Ab\",\n    ];\n    this.enharmonicPairs = {\n      Bb: \"A#\",\n      Db: \"C#\",\n      Eb: \"D#\",\n      Gb: \"F#\",\n      Ab: \"G#\",\n    };\n    this.currentNotes = [];\n  }\n  normalizeNote(note) {\n    return this.enharmonicPairs[note] || note;\n  }\n\n  setCurrentNotes(notes) {\n    validateNotes(notes, this.notes);\n    this.currentNotes = notes;\n  }\n\n  getCurrentNotes() {\n    return this.currentNotes;\n  }\n\n  randomizeCurrentNotes() {\n    const note1 = getRandomNote(this.notes);\n    let note2 = getRandomNote(this.notes);\n    while (note1 === note2) {\n      note2 = getRandomNote(this.notes);\n    }\n    this.currentNotes = [note1, note2];\n  }\n\n  checkAnswer(distance) {\n    if (this.currentNotes.length !== VALID_NOTE_COUNT) {\n      throw new Error(errorMessage.notesNotSet);\n    }\n    const normalizedNotes = this.notes.filter((note) => !note.includes(\"b\"));\n    const firstNote = this.normalizeNote(this.currentNotes[0]);\n    const secondNote = this.normalizeNote(this.currentNotes[1]);\n\n    const indexOfFirstNote = normalizedNotes.indexOf(firstNote);\n    const noteCircle = [\n      ...normalizedNotes.slice(indexOfFirstNote),\n      ...normalizedNotes,\n    ];\n\n    const currentIndex = noteCircle.indexOf(firstNote);\n    const targetIndex = noteCircle.indexOf(secondNote);\n\n    const clockwiseDistance = targetIndex - currentIndex;\n    const counterClockwiseDistance = normalizedNotes.length - targetIndex;\n\n    return (\n      distance === clockwiseDistance || distance === counterClockwiseDistance\n    );\n  }\n}\n\nmodule.exports = { JamBuddy, errorMessage };\n\n\n//# sourceURL=webpack://sulaiman-ndlovu-199-semitone-difference-basic-algorithm-javascript/./src/jam_buddy.js?");

/***/ }),

/***/ "./src/jam_buddy_dom.js":
/*!******************************!*\
  !*** ./src/jam_buddy_dom.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { JamBuddy } = __webpack_require__(/*! ./jam_buddy */ \"./src/jam_buddy.js\");\n\nlet streak = 0;\n\nconst messages = {\n  enterNumber: \"Please enter a valid number.\",\n  correctAnswer: \"Correct! Well done!\",\n  incorrectAnswer: \"Incorrect. Try again.\",\n  incorrectRange: \"Answer should be between 0 & 11\",\n  singleAnswer: (answer) => `Correct answer is ${answer}`,\n  doubleAnswer: (answer1, answer2) =>\n    `Correct answers clockwise and counter are ${answer1} & ${answer2}`,\n};\n\nconst setupDOM = (document, jamBuddy) => {\n  const elements = {\n    note1: document.getElementById(\"note1\"),\n    note2: document.getElementById(\"note2\"),\n    message: document.getElementById(\"message\"),\n    secondMessage: document.getElementById(\"secondMessage\"),\n    answerInput: document.getElementById(\"answerInput\"),\n    randomizeButton: document.getElementById(\"randomizeNotesButton\"),\n    checkAnswerButton: document.getElementById(\"checkAnswerButton\"),\n    quitButton: document.getElementById(\"quitButton\"),\n    allNotes: document.getElementById(\"allNotes\"),\n    streakDisplay: document.getElementById(\"streak\"),\n    restartButton: document.getElementById(\"restartButton\"),\n  };\n\n  jamBuddy.randomizeCurrentNotes();\n  updateCurrentNotesDisplay(jamBuddy, elements.note1, elements.note2);\n  updateStreakDisplay(elements.streakDisplay);\n\n  elements.randomizeButton.addEventListener(\"click\", () =>\n    handleRandomizeClick(jamBuddy, elements)\n  );\n  elements.checkAnswerButton.addEventListener(\"click\", () =>\n    handleCheckAnswerClick(document, jamBuddy, elements)\n  );\n  elements.quitButton.addEventListener(\"click\", () =>\n    handleQuitClick(document, jamBuddy, elements)\n  );\n  elements.restartButton.addEventListener(\"click\", () =>\n    handleRestartClick(jamBuddy, elements)\n  );\n};\n\nconst updateCurrentNotesDisplay = (jamBuddy, note1, note2) => {\n  const notes = jamBuddy.getCurrentNotes();\n  note1.value = notes[0] || \"\";\n  note2.value = notes[1] || \"\";\n};\n\nconst resetMessage = (messageElement) => {\n  messageElement.textContent = \"\";\n  messageElement.className = \"message\";\n};\n\nconst displayMessage = (messageElement, message, isSuccess) => {\n  messageElement.textContent = message;\n  messageElement.className = isSuccess ? \"message success\" : \"message error\";\n};\n\nconst updateStreakDisplay = (streakElement) => {\n  streakElement.textContent = `Streak: ${streak}`;\n};\n\nconst handleRandomizeClick = (jamBuddy, elements) => {\n  jamBuddy.randomizeCurrentNotes();\n  updateCurrentNotesDisplay(jamBuddy, elements.note1, elements.note2);\n  resetMessage(elements.message);\n  resetMessage(elements.secondMessage);\n  enableButton(elements.checkAnswerButton);\n  enableButton(elements.quitButton);\n  elements.answerInput.disabled = false;\n  elements.answerInput.value = \"\";\n  elements.allNotes.innerHTML = \"\";\n};\n\nconst handleCheckAnswerClick = (document, jamBuddy, elements) => {\n  const answer = parseInt(elements.answerInput.value, 10);\n\n  try {\n    validateAnswer(elements, answer);\n    const isCorrect = jamBuddy.checkAnswer(answer);\n    if (isCorrect) {\n      streak++;\n      displayCorrectAnswers(jamBuddy, elements.secondMessage);\n      displayMessage(elements.message, messages.correctAnswer, true);\n      generateAllNotes(document, jamBuddy, elements.allNotes);\n      disableButton(elements.checkAnswerButton);\n      disableButton(elements.quitButton);\n      elements.answerInput.disabled = true;\n    } else {\n      streak = 0;\n      displayMessage(elements.message, messages.incorrectAnswer, false);\n    }\n    updateStreakDisplay(elements.streakDisplay);\n  } catch (error) {\n    displayMessage(elements.message, error.message, false);\n  }\n};\n\nconst handleQuitClick = (document, jamBuddy, elements) => {\n  streak = 0;\n  updateStreakDisplay(elements.streakDisplay);\n  generateAllNotes(document, jamBuddy, elements.allNotes);\n  elements.quitButton.hidden = true;\n  elements.restartButton.hidden = false;\n  disableButton(elements.checkAnswerButton);\n  disableButton(elements.randomizeButton);\n  elements.answerInput.disabled = true;\n  displayCorrectAnswers(jamBuddy, elements.message);\n};\n\nconst handleRestartClick = (jamBuddy, elements) => {\n  elements.allNotes.innerHTML = \"\";\n  jamBuddy.randomizeCurrentNotes();\n  updateCurrentNotesDisplay(jamBuddy, elements.note1, elements.note2);\n  elements.restartButton.hidden = true;\n  elements.quitButton.hidden = false;\n  enableButton(elements.checkAnswerButton);\n  enableButton(elements.randomizeButton);\n  elements.answerInput.disabled = false;\n  elements.answerInput.value = \"\";\n  resetMessage(elements.message);\n};\n\nconst validateAnswer = (elements, answer) => {\n  if (elements.answerInput.value < 0 || elements.answerInput.value > 11) {\n    throw new Error(messages.incorrectRange);\n  }\n  if (isNaN(answer)) {\n    throw new Error(messages.enterNumber);\n  }\n};\n\nconst generateAllNotes = (document, jamBuddy, allNotesElement) => {\n  const notes = [\n    \"A\",\n    \"A#|Bb\",\n    \"B\",\n    \"C\",\n    \"C#|Db\",\n    \"D\",\n    \"D#|Eb\",\n    \"E\",\n    \"F\",\n    \"F#|Gb\",\n    \"G\",\n    \"G#|Ab\",\n  ];\n\n  allNotesElement.innerHTML = \"\";\n  notes.forEach((note) => {\n    createNoteElement(document, jamBuddy, allNotesElement, note);\n  });\n};\n\nconst highlightNote = (jamBuddy, element, currentNote) => {\n  const [note1, note2] = jamBuddy.getCurrentNotes();\n  if (currentNote.length > 2) {\n    const [sharpNote, flatNote] = currentNote.split(\"|\");\n    if (\n      note1 === sharpNote ||\n      note2 === sharpNote ||\n      note1 === flatNote ||\n      note2 === flatNote\n    ) {\n      element.classList.add(\"shadeNote\");\n    }\n  } else if (note1 === currentNote || note2 === currentNote) {\n    element.classList.add(\"shadeNote\");\n  }\n};\n\nconst createNoteElement = (document, jamBuddy, allNotes, note) => {\n  const inputElement = document.createElement(\"input\");\n  inputElement.type = \"text\";\n  inputElement.value = note;\n  inputElement.className = \"noteInput\";\n  inputElement.readOnly = true;\n\n  highlightNote(jamBuddy, inputElement, note);\n  allNotes.appendChild(inputElement);\n};\n\nconst disableButton = (button) => {\n  button.disabled = true;\n  button.style.backgroundColor = \"#b08bc3\";\n  button.style.cursor = \"not-allowed\";\n  button.style.opacity = \"0.6\";\n};\n\nconst enableButton = (button) => {\n  button.disabled = false;\n  button.style.backgroundColor = \"\";\n  button.style.cursor = \"\";\n  button.style.opacity = \"\";\n};\n\nconst displayCorrectAnswers = (jamBuddy, message) => {\n  const correctAnswers = [];\n\n  let answer = 0;\n  while (correctAnswers.length < 2) {\n    const isCorrect = jamBuddy.checkAnswer(answer);\n    if (isCorrect) correctAnswers.push(answer);\n    if (correctAnswers[0] === 0) break;\n    answer++;\n  }\n\n  if (correctAnswers.length === 1) {\n    displayMessage(message, messages.singleAnswer(correctAnswers[0]), true);\n  } else {\n    displayMessage(\n      message,\n      messages.doubleAnswer(correctAnswers[0], correctAnswers[1]),\n      true\n    );\n  }\n};\n\nif (typeof document !== \"undefined\") {\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    const jamBuddy = new JamBuddy();\n    setupDOM(document, jamBuddy);\n  });\n}\n\nmodule.exports = { setupDOM, messages };\n\n\n//# sourceURL=webpack://sulaiman-ndlovu-199-semitone-difference-basic-algorithm-javascript/./src/jam_buddy_dom.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/jam_buddy_dom.js");
/******/ 	
/******/ })()
;