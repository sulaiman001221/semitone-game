/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/jam_buddy.js":
/*!**************************!*\
  !*** ./src/jam_buddy.js ***!
  \**************************/
/***/ ((module) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar errorMessage = {\n  invalidNotes: \"Invalid notes provided. Notes should be one of A, A#, Bb, B, C, C#, Db, D, D#, Eb, E, F, F#, Gb, G, G#, Ab.\",\n  notesNotSet: \"Current notes not set, you should set two notes before checking the answer\",\n  invalidDataType: \"All the provided notes should be strings\",\n  invalidArray: \"Notes should be provided as an array\",\n  similarNotes: \"Notes should not be similar\",\n  invalidLength: \"You should provide exactly two notes\"\n};\nvar VALID_NOTE_COUNT = 2;\nfunction validateNotes(notes, validNotes) {\n  if (!Array.isArray(notes)) {\n    throw new Error(errorMessage.invalidArray);\n  }\n  if (notes.length !== VALID_NOTE_COUNT) {\n    throw new Error(errorMessage.invalidLength);\n  }\n  if (notes[0] === notes[1]) {\n    throw new Error(errorMessage.similarNotes);\n  }\n  for (var i = 0; i < notes.length; i++) {\n    if (typeof notes[i] !== \"string\") {\n      throw new Error(errorMessage.invalidDataType);\n    }\n    if (!validNotes.includes(notes[i])) {\n      throw new Error(errorMessage.invalidNotes);\n    }\n  }\n}\nfunction getRandomNote(notes) {\n  return notes[Math.floor(Math.random() * notes.length)];\n}\nvar JamBuddy = /*#__PURE__*/function () {\n  function JamBuddy() {\n    _classCallCheck(this, JamBuddy);\n    this.notes = [\"A\", \"A#\", \"Bb\", \"B\", \"C\", \"C#\", \"Db\", \"D\", \"D#\", \"Eb\", \"E\", \"F\", \"F#\", \"Gb\", \"G\", \"G#\", \"Ab\"];\n    this.enharmonicPairs = {\n      Bb: \"A#\",\n      Db: \"C#\",\n      Eb: \"D#\",\n      Gb: \"F#\",\n      Ab: \"G#\"\n    };\n    this.currentNotes = [];\n  }\n  return _createClass(JamBuddy, [{\n    key: \"normalizeNote\",\n    value: function normalizeNote(note) {\n      return this.enharmonicPairs[note] || note;\n    }\n  }, {\n    key: \"setCurrentNotes\",\n    value: function setCurrentNotes(notes) {\n      validateNotes(notes, this.notes);\n      this.currentNotes = notes;\n    }\n  }, {\n    key: \"getCurrentNotes\",\n    value: function getCurrentNotes() {\n      return this.currentNotes;\n    }\n  }, {\n    key: \"randomizeCurrentNotes\",\n    value: function randomizeCurrentNotes() {\n      var note1 = getRandomNote(this.notes);\n      var note2 = getRandomNote(this.notes);\n      while (note1 === note2) {\n        note2 = getRandomNote(this.notes);\n      }\n      this.currentNotes = [note1, note2];\n    }\n  }, {\n    key: \"checkAnswer\",\n    value: function checkAnswer(distance) {\n      if (this.currentNotes.length !== VALID_NOTE_COUNT) {\n        throw new Error(errorMessage.notesNotSet);\n      }\n      var normalizedNotes = this.notes.filter(function (note) {\n        return !note.includes(\"b\");\n      });\n      var firstNote = this.normalizeNote(this.currentNotes[0]);\n      var secondNote = this.normalizeNote(this.currentNotes[1]);\n      var indexOfFirstNote = normalizedNotes.indexOf(firstNote);\n      var noteCircle = [].concat(_toConsumableArray(normalizedNotes.slice(indexOfFirstNote)), _toConsumableArray(normalizedNotes));\n      var currentIndex = noteCircle.indexOf(firstNote);\n      var targetIndex = noteCircle.indexOf(secondNote);\n      var clockwiseDistance = targetIndex - currentIndex;\n      var counterClockwiseDistance = normalizedNotes.length - targetIndex;\n      return distance === clockwiseDistance || distance === counterClockwiseDistance;\n    }\n  }]);\n}();\nmodule.exports = {\n  JamBuddy: JamBuddy,\n  errorMessage: errorMessage\n};\n\n//# sourceURL=webpack://sulaiman-ndlovu-199-semitone-difference-basic-algorithm-javascript/./src/jam_buddy.js?");

/***/ }),

/***/ "./src/jam_buddy_dom.js":
/*!******************************!*\
  !*** ./src/jam_buddy_dom.js ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nvar _require = __webpack_require__(/*! ./jam_buddy */ \"./src/jam_buddy.js\"),\n  JamBuddy = _require.JamBuddy;\nvar streak = 0;\nvar messages = {\n  enterNumber: \"Please enter a valid number.\",\n  correctAnswer: \"Correct! Well done!\",\n  incorrectAnswer: \"Incorrect. Try again.\",\n  singleAnswer: function singleAnswer(answer) {\n    return \"Correct answer is \".concat(answer);\n  },\n  doubleAnswer: function doubleAnswer(answer1, answer2) {\n    return \"Correct answers clockwise and counter are \".concat(answer1, \" & \").concat(answer2);\n  }\n};\nvar setupDOM = function setupDOM(document, jamBuddy) {\n  var elements = {\n    note1: document.getElementById(\"note1\"),\n    note2: document.getElementById(\"note2\"),\n    message: document.getElementById(\"message\"),\n    answerInput: document.getElementById(\"answerInput\"),\n    randomizeButton: document.getElementById(\"randomizeNotesButton\"),\n    checkAnswerButton: document.getElementById(\"checkAnswerButton\"),\n    quitButton: document.getElementById(\"quitButton\"),\n    allNotes: document.getElementById(\"allNotes\"),\n    streakDisplay: document.getElementById(\"streak\"),\n    restartButton: document.getElementById(\"restartButton\")\n  };\n  jamBuddy.randomizeCurrentNotes();\n  updateCurrentNotesDisplay(jamBuddy, elements.note1, elements.note2);\n  updateStreakDisplay(elements.streakDisplay);\n  elements.randomizeButton.addEventListener(\"click\", function () {\n    return handleRandomizeClick(jamBuddy, elements);\n  });\n  elements.checkAnswerButton.addEventListener(\"click\", function () {\n    return handleCheckAnswerClick(document, jamBuddy, elements);\n  });\n  elements.quitButton.addEventListener(\"click\", function () {\n    return handleQuitClick(document, jamBuddy, elements);\n  });\n  elements.restartButton.addEventListener(\"click\", function () {\n    return handleRestartClick(jamBuddy, elements);\n  });\n};\nvar updateCurrentNotesDisplay = function updateCurrentNotesDisplay(jamBuddy, note1, note2) {\n  var notes = jamBuddy.getCurrentNotes();\n  note1.value = notes[0] || \"\";\n  note2.value = notes[1] || \"\";\n};\nvar resetMessage = function resetMessage(messageElement) {\n  messageElement.textContent = \"\";\n  messageElement.className = \"message\";\n};\nvar displayMessage = function displayMessage(messageElement, message, isSuccess) {\n  messageElement.textContent = message;\n  messageElement.className = isSuccess ? \"message success\" : \"message error\";\n};\nvar updateStreakDisplay = function updateStreakDisplay(streakElement) {\n  streakElement.textContent = \"Streak: \".concat(streak);\n};\nvar handleRandomizeClick = function handleRandomizeClick(jamBuddy, elements) {\n  jamBuddy.randomizeCurrentNotes();\n  updateCurrentNotesDisplay(jamBuddy, elements.note1, elements.note2);\n  resetMessage(elements.message);\n  enableButton(elements.checkAnswerButton);\n  enableButton(elements.quitButton);\n  elements.answerInput.disabled = false;\n  elements.answerInput.value = \"\";\n  elements.allNotes.innerHTML = \"\";\n};\nvar handleCheckAnswerClick = function handleCheckAnswerClick(document, jamBuddy, elements) {\n  var answer = parseInt(elements.answerInput.value, 10);\n  if (isNaN(answer)) {\n    displayMessage(elements.message, messages.enterNumber, false);\n    return;\n  }\n  try {\n    var isCorrect = jamBuddy.checkAnswer(answer);\n    if (isCorrect) {\n      streak++;\n      displayMessage(elements.message, messages.correctAnswer, true);\n      generateAllNotes(document, jamBuddy, elements.allNotes);\n      disableButton(elements.checkAnswerButton);\n      disableButton(elements.quitButton);\n      elements.answerInput.disabled = true;\n    } else {\n      streak = 0;\n      displayMessage(elements.message, messages.incorrectAnswer, false);\n    }\n    updateStreakDisplay(elements.streakDisplay);\n  } catch (error) {\n    displayMessage(elements.message, error.message, false);\n  }\n};\nvar handleQuitClick = function handleQuitClick(document, jamBuddy, elements) {\n  streak = 0;\n  updateStreakDisplay(elements.streakDisplay);\n  generateAllNotes(document, jamBuddy, elements.allNotes);\n  elements.quitButton.hidden = true;\n  elements.restartButton.hidden = false;\n  disableButton(elements.checkAnswerButton);\n  disableButton(elements.randomizeButton);\n  elements.answerInput.disabled = true;\n  displayCorrectAnswers(jamBuddy, elements.message);\n};\nvar handleRestartClick = function handleRestartClick(jamBuddy, elements) {\n  elements.allNotes.innerHTML = \"\";\n  jamBuddy.randomizeCurrentNotes();\n  updateCurrentNotesDisplay(jamBuddy, elements.note1, elements.note2);\n  elements.restartButton.hidden = true;\n  elements.quitButton.hidden = false;\n  enableButton(elements.checkAnswerButton);\n  enableButton(elements.randomizeButton);\n  elements.answerInput.disabled = false;\n  elements.answerInput.value = \"\";\n  resetMessage(elements.message);\n};\nvar generateAllNotes = function generateAllNotes(document, jamBuddy, allNotesElement) {\n  var notes = [\"A\", \"A#|Bb\", \"B\", \"C\", \"C#|Db\", \"D\", \"D#|Eb\", \"E\", \"F\", \"F#|Gb\", \"G\", \"G#|Ab\"];\n  allNotesElement.innerHTML = \"\";\n  notes.forEach(function (note) {\n    createNoteElement(document, jamBuddy, allNotesElement, note);\n  });\n};\nvar highlightNote = function highlightNote(jamBuddy, element, currentNote) {\n  var _jamBuddy$getCurrentN = jamBuddy.getCurrentNotes(),\n    _jamBuddy$getCurrentN2 = _slicedToArray(_jamBuddy$getCurrentN, 2),\n    note1 = _jamBuddy$getCurrentN2[0],\n    note2 = _jamBuddy$getCurrentN2[1];\n  if (currentNote.length > 2) {\n    var _currentNote$split = currentNote.split(\"|\"),\n      _currentNote$split2 = _slicedToArray(_currentNote$split, 2),\n      sharpNote = _currentNote$split2[0],\n      flatNote = _currentNote$split2[1];\n    if (note1 === sharpNote || note2 === sharpNote || note1 === flatNote || note2 === flatNote) {\n      element.classList.add(\"shadeNote\");\n    }\n  } else if (note1 === currentNote || note2 === currentNote) {\n    element.classList.add(\"shadeNote\");\n  }\n};\nvar createNoteElement = function createNoteElement(document, jamBuddy, allNotes, note) {\n  var inputElement = document.createElement(\"input\");\n  inputElement.type = \"text\";\n  inputElement.value = note;\n  inputElement.className = \"noteInput\";\n  inputElement.readOnly = true;\n  highlightNote(jamBuddy, inputElement, note);\n  allNotes.appendChild(inputElement);\n};\nvar disableButton = function disableButton(button) {\n  button.disabled = true;\n  button.style.backgroundColor = \"#b08bc3\";\n  button.style.cursor = \"not-allowed\";\n  button.style.opacity = \"0.6\";\n};\nvar enableButton = function enableButton(button) {\n  button.disabled = false;\n  button.style.backgroundColor = \"\";\n  button.style.cursor = \"\";\n  button.style.opacity = \"\";\n};\nvar displayCorrectAnswers = function displayCorrectAnswers(jamBuddy, message) {\n  var correctAnswers = [];\n  var answer = 0;\n  while (correctAnswers.length < 2) {\n    var isCorrect = jamBuddy.checkAnswer(answer);\n    if (isCorrect) correctAnswers.push(answer);\n    if (correctAnswers[0] === 0) break;\n    answer++;\n  }\n  if (correctAnswers.length === 1) {\n    displayMessage(message, messages.singleAnswer(correctAnswers[0]), true);\n  } else {\n    displayMessage(message, messages.doubleAnswer(correctAnswers[0], correctAnswers[1]), true);\n  }\n};\nif (typeof document !== \"undefined\") {\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    var jamBuddy = new JamBuddy();\n    setupDOM(document, jamBuddy);\n  });\n}\nmodule.exports = {\n  setupDOM: setupDOM,\n  messages: messages\n};\n\n//# sourceURL=webpack://sulaiman-ndlovu-199-semitone-difference-basic-algorithm-javascript/./src/jam_buddy_dom.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/jam_buddy_dom.js");
/******/ 	
/******/ })()
;